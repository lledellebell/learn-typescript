name: 'Create Algorithm Problem PR with Code Check (TS/JS)'

on:
  workflow_dispatch:
    inputs:
      problemTitle:
        description: '문제 제목을 입력하세요'
        required: true
      problemLink:
        description: '문제 링크를 입력하세요'
        required: true
      solutionApproach:
        description: '풀이 방법을 간단히 설명하세요'
        required: true
      code:
        description: '풀이 코드를 입력하세요 (TypeScript 또는 JavaScript)'
        required: true
      language:
        description: '코드 언어를 선택하세요 (javascript 또는 typescript)'
        required: true
        default: 'javascript'
        options:
          - javascript
          - typescript
      timeComplexity:
        description: '시간 복잡도를 입력하세요 (예: O(n))'
        required: true
      spaceComplexity:
        description: '공간 복잡도를 입력하세요 (예: O(1))'
        required: true
      feedbackRequest:
        description: '코드에 대한 피드백 요청 사항을 입력하세요'
        required: false
      additionalQuestions:
        description: '추가 질문을 입력하세요'
        required: false

jobs:
  create-dependabot-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Validate Code Syntax
        id: validate-code
        run: |
          echo "${{ github.event.inputs.code }}" > solution.${{ github.event.inputs.language == 'typescript' && 'ts' || 'js' }}
          if [ "${{ github.event.inputs.language }}" == "typescript" ]; then
            npx tsc --noEmit solution.ts
          else
            node -c solution.js
          fi
        shell: bash
      - name: Check Syntax Result
        if: failure()
        run: |
          echo "코드에 문법 오류가 있습니다. 확인 후 다시 시도해주세요."
          exit 1

      - name: Create Algorithm Problem PR
        id: create-pr
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const problemTitle = '${{ github.event.inputs.problemTitle }}';
            const problemLink = '${{ github.event.inputs.problemLink }}';
            const solutionApproach = '${{ github.event.inputs.solutionApproach }}';
            const code = '${{ github.event.inputs.code }}';
            const language = '${{ github.event.inputs.language }}';
            const timeComplexity = '${{ github.event.inputs.timeComplexity }}';
            const spaceComplexity = '${{ github.event.inputs.spaceComplexity }}';
            const feedbackRequest = '${{ github.event.inputs.feedbackRequest || '없음' }}';
            const additionalQuestions = '${{ github.event.inputs.additionalQuestions || "없음" }}';
            const prBody = `
              📝 **문제 설명**
              문제 링크: [${problemLink}](${problemLink})
              
              💡 **풀이 방법**
              ${solutionApproach}
              
              🧑‍💻 **코드 (${language})**
              \`\`\`${language}
              ${code}
              \`\`\`
              
              📊 **시간 및 공간 복잡도**
              - 시간 복잡도: ${timeComplexity}
              - 공간 복잡도: ${spaceComplexity}
              
              🙋‍♂️ **요청 사항**
              ${feedbackRequest}
              
              🤔 **추가 질문**
              ${additionalQuestions}
            `;

            const branchName = `dependabot/algorithm${Date.now()}`;

            // 새 브랜치 생성
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/heads/${branchName}`,
              sha: context.sha,
            });

            // 브랜치에 새로운 파일 생성
            const filePath = `algorithms/**/${problemTitle.replace(/ /g, '_')}.${language === 'typescript' ? 'ts' : 'js'}`;
            const fileContent = Buffer.from(prBody).toString('base64');

            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: filePath,
              message: `${problemTitle}`,
              content: fileContent,
              branch: branchName,
            });

            // 풀리퀘스트 생성
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `${problemTitle}`,
              head: branchName,
              base: 'master',
              body: prBody,
            });

            return pr.data.number;
      - name: Add Labels to PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ steps.create-pr.outputs.result }};
            const language = '${{ github.event.inputs.language }}';

            // 언어에 따라 라벨 추가
            const labels = [language === 'typescript' ? 'TypeScript' : 'JavaScript'];

            // 시간/공간 복잡도 평가에 따른 라벨 추가
            const timeComplexity = '${{ github.event.inputs.timeComplexity }}';
            const spaceComplexity = '${{ github.event.inputs.spaceComplexity }}';

            if (timeComplexity.includes('O(1)')) {
              labels.push('시간 복잡도: 상수 시간');
            } else if (timeComplexity.includes('O(n)')) {
              labels.push('시간 복잡도: 선형 시간');
            } else if (timeComplexity.includes('O(n^2)')) {
              labels.push('시간 복잡도: 이차 시간');
            } else {
              labels.push('시간 복잡도: 기타');
            }

            if (spaceComplexity.includes('O(1)')) {
              labels.push('공간 복잡도: 상수 공간');
            } else if (spaceComplexity.includes('O(n)')) {
              labels.push('공간 복잡도: 선형 공간');
            } else {
              labels.push('공간 복잡도: 기타');
            }

            // PR에 라벨 추가
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              labels: labels,
            });
